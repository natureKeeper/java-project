<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd" default-lazy-init="false">

	<bean id="memcachedPool" class="com.danga.MemCached.SockIOPool" factory-method="getInstance" init-method="initialize" destroy-method="shutDown" lazy-init="false">
		<constructor-arg>
			<value>memcachedPool</value>
		</constructor-arg>
		<property name="servers">
			<list>
				<value>${memcachedPool.servers}</value>
			</list>
		</property>
		<property name="initConn" value="20" />
		<property name="minConn" value="10" />
		<property name="maxConn" value="50" />
		<property name="maintSleep" value="30" />
		<property name="nagle" value="false" />
		<property name="socketTO" value="3000" />
	</bean>

	<bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
		<constructor-arg>
			<value>memcachedPool</value>
		</constructor-arg>
		<property name="compressEnable" value="false" />
		<property name="compressThreshold" value="4096" />
	</bean>

	<bean name="centralizedCache" class="common.cache.DangaMemCachedCache">
		<property name="memCachedClient" ref="memCachedClient" />
	</bean>
<!--	<bean name="centralizedCache" class="my.dont.commit.NullableCache"/>-->
<!--	<bean id="cacheAopAdvisorOrder" class="java.lang.Integer">-->
<!--		<constructor-arg value="30" />-->
<!--	</bean>-->

<!--	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
<!--		<property name="configLocation" value="classpath:ehcache.xml" />-->
<!--	</bean>-->
<!---->
<!--	<bean id="ehCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">-->
<!--		<property name="cacheManager" ref="ehCacheManager" />-->
<!--		<property name="cacheName" value="com.irm.CACHE" />-->
<!--	</bean>-->

	<!-- shared info should be stored in local cache(ehcache) instead of remote cache(memcached)! -->
<!--	<bean id="cache" class="common.cache.EhCache">-->
<!--		<property name="cacher" ref="ehCache" />-->
<!--		</bean>-->

	<!--destroy-method="destroy"-->
	<bean id="cache" class="common.cache.MapCache" init-method="init">
		<property name="cacher">
			<bean class="java.util.concurrent.ConcurrentHashMap" />
		</property>
	</bean>

	<bean id="cacheManagementService" class="com.irm.system.cache.service.impl.CacheManagementServiceImpl">
		<property name="endpoints">			
			<value>${cluster.server.endpoints}</value>
		</property>
		<property name="cache" ref="cache" />
	</bean>

	<bean id="methodCacheInterceptor" class="common.cache.MethodCacheInterceptor">
		<property name="cache" ref="cache" />
		<property name="excludeParameterType" value="com.irm.system.authorization.vo.UserContext" />
	</bean>

	<!--
		bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"> <property name="beanNames"> <list> <value>aaComponent</value> <value>bbComponent</value> </list> </property>
		<property name="interceptorNames"> <list> <value>methodCacheInterceptor</value> </list> </property> </bean
	-->

	<aop:config>
		<!-- aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.business.*.service.cache.*.*(..))" order="${aopOrderCache}" order="30" / -->
		<!--		execution(* com.irm.system.access.common.service.AbstractCacheableAccessService.*(..))-->
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.delegate.impl.MetaEntityTypeAccessDelegateProxyServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.MetaDictionaryTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.MetaDictionaryAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.DictionaryTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.DictionaryAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.MetaEntityTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.EntityTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.MetaRelationshipTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.RelationshipTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.SpecialtyTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.BandwidthAccessServiceImpl.findAll(..))" order="30"  />
<!--		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.EquipmentModelAccessServiceImpl.findAll(..))" order="30"  />-->
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.EquipmentVendorAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.NetworkLayerAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.NetworkEntityCatalogAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.MetaAttributeTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.AttributeTypeAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.OperationAccessServiceImpl.findAll(..))" order="30"  />
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.namespace.service.impl.FiberChromatogramAccessServiceImpl.findAll(..))" order="30"  />
		
		<aop:advisor advice-ref="methodCacheInterceptor" pointcut="execution(* com.irm.system.access.metaentity.service.impl.MetaRegionCacheAccessServiceImpl.findCacheRegions(..))" order="30"  />
		
	</aop:config>

</beans>
